// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum NoticeCategory {
  EXAM
  EVENT
  HOLIDAY
  GENERAL
}

enum ExamType {
  MIDTERM
  FINAL
  QUIZ
  ASSIGNMENT
  PROJECT
}

enum ExamStatus {
  UPCOMING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum LiveClassStatus {
  SCHEDULED
  LIVE
  COMPLETED
  CANCELLED
}

enum MaterialType {
  PDF
  DOCX
  PPT
  VIDEO
  LINK
  IMAGE
}

enum ResourceType {
  PDF
  DOCUMENT
  PRESENTATION
  SPREADSHEET
  VIDEO
  AUDIO
  IMAGE
  LINK
  YOUTUBE
  ARCHIVE
  CODE
  OTHER
}

enum ResourceStatus {
  DRAFT
  PUBLISHED
  HIDDEN
  ARCHIVED
}

enum ResourceCategory {
  LECTURE_NOTE
  ASSIGNMENT
  REFERENCE_MATERIAL
  SAMPLE_CODE
  PRACTICE_QUESTION
  SOLUTION
  READING_MATERIAL
  SUPPLEMENTARY
  EXTERNAL_LINK
  OTHER
}

enum NotificationType {
  LIVE_CLASS
  EXAM
  NOTICE
  RESULT
  MATERIAL
  MESSAGE
  GENERAL
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Grade {
  A_PLUS
  A
  B_PLUS
  B
  C_PLUS
  C
  D
  F
}

enum LessonType {
  VIDEO
  YOUTUBE_LIVE
  PDF
  TEXT
  QUIZ
  ASSIGNMENT
  EXTERNAL_LINK
}

enum ModuleStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  PUBLISHED
  ARCHIVED
}

enum ActivityType {
  MODULE_ENROLLED
  LESSON_VIEWED
  LESSON_COMPLETED
  QUIZ_ATTEMPTED
  NOTE_CREATED
  LIVE_SESSION_JOINED
  MODULE_COMPLETED
  ASSIGNMENT_SUBMITTED
}

model User {
  id            String    @id @default(cuid())
  name          String
  firstName     String? // Added for better name management
  middleName    String? // Added for full names
  lastName      String? // Added for better name management
  email         String?   @unique // Made optional for students
  phone         String?   @unique
  symbolNo      String?   @unique // Student Symbol Number - now auto-generated
  school        String? // Added for students
  department    String? // Added for teachers
  experience    String? // Added for teachers
  role          Role      @default(STUDENT)
  password      String? // Made optional - will be auto-generated
  profileImage  String?
  verified      Boolean   @default(false)
  isActive      Boolean   @default(true)
  isBlocked     Boolean   @default(false)
  blockReason   String?
  blockedBy     String?
  blockedAt     DateTime?
  lastLogin     DateTime?
  loginAttempts Int       @default(0)
  lockoutUntil  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  profile               Profile?
  teacherClasses        TeacherClass[]
  studentClasses        StudentClass[]
  liveClassesCreated    LiveClass[]         @relation("TeacherLiveClasses")
  attendances           Attendance[]
  materialsUploaded     Material[]          @relation("TeacherMaterials")
  materialAccessLogs    MaterialAccessLog[]
  noticesPublished      Notice[]            @relation("PublishedByUser")
  examsCreated          Exam[]              @relation("ExamCreatedBy")
  examSubmissions       ExamSubmission[]
  results               Result[]
  certificatesReceived  Certificate[]
  notificationsSent     Notification[]      @relation("NotificationSender")
  notificationsReceived Notification[]      @relation("NotificationReceiver")
  messagesSent          Message[]           @relation("MessageSender")
  messagesReceived      Message[]           @relation("MessageReceiver")
  routinesCreated       Routine[]           @relation("RoutineCreatedBy")
  teacherRoutines       Routine[]           @relation("TeacherRoutines")
  adminSessions         AdminSession[]

  // Module system relations
  modulesCreated       Module[]           @relation("ModuleTeacher")
  enrollmentsAsStudent ModuleEnrollment[] @relation("StudentEnrollments")
  enrollmentsCreated   ModuleEnrollment[] @relation("EnrollmentCreator")
  topicProgress        TopicProgress[]
  lessonProgress       LessonProgress[]
  lessonNotes          LessonNote[]
  moduleReviews        ModuleReview[]
  activityHistory      ActivityHistory[]

  // Resource system relations
  resourcesUploaded  ModuleResource[]    @relation("ResourceUploader")
  resourceAccessLogs ResourceAccessLog[] @relation("ResourceAccess")

  @@map("users")
}

model AdminSession {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  refreshToken String?  @unique
  ipAddress    String?
  userAgent    String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_sessions")
}

model Profile {
  id               String    @id @default(cuid())
  userId           String    @unique
  address          String?
  dateOfBirth      DateTime?
  guardianName     String?
  guardianPhone    String?
  emergencyContact String?
  bloodGroup       String?
  admissionDate    DateTime?
  rollNumber       String?
  classSection     String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Class {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "Class 10", "Grade 12"
  section     String? // e.g., "A", "B", "Science"
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teachers    TeacherClass[]
  students    StudentClass[]
  liveClasses LiveClass[]
  routines    Routine[]
  notices     Notice[]
  exams       Exam[]
  messages    Message[]
  modules     Module[]

  @@unique([name, section])
  @@map("classes")
}

model Subject {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String?  @unique
  description String?
  color       String? // For UI color coding
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teachers    TeacherClass[]
  liveClasses LiveClass[]
  materials   Material[]
  routines    Routine[]
  exams       Exam[]
  results     Result[]
  modules     Module[]

  @@map("subjects")
}

model TeacherClass {
  id        String   @id @default(cuid())
  teacherId String
  classId   String
  subjectId String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  teacher User    @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([teacherId, classId, subjectId])
  @@map("teacher_classes")
}

model StudentClass {
  id         String   @id @default(cuid())
  studentId  String
  classId    String
  isActive   Boolean  @default(true)
  enrolledAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  student User  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class   Class @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId])
  @@map("student_classes")
}

model LiveClass {
  id           String          @id @default(cuid())
  title        String
  description  String?
  subjectId    String
  teacherId    String
  classId      String
  youtubeUrl   String?
  meetingLink  String?
  startTime    DateTime
  endTime      DateTime
  status       LiveClassStatus @default(SCHEDULED)
  isRecorded   Boolean         @default(false)
  recordingUrl String?
  maxStudents  Int?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relations
  subject     Subject      @relation(fields: [subjectId], references: [id])
  teacher     User         @relation("TeacherLiveClasses", fields: [teacherId], references: [id])
  class       Class        @relation(fields: [classId], references: [id])
  attendances Attendance[]

  @@map("live_classes")
}

model Attendance {
  id          String    @id @default(cuid())
  studentId   String
  liveClassId String
  joinedAt    DateTime  @default(now())
  leftAt      DateTime?
  duration    Int? // in minutes
  isPresent   Boolean   @default(true)
  createdAt   DateTime  @default(now())

  // Relations
  student   User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  liveClass LiveClass @relation(fields: [liveClassId], references: [id], onDelete: Cascade)

  @@unique([studentId, liveClassId])
  @@map("attendances")
}

model Material {
  id            String       @id @default(cuid())
  title         String
  description   String?
  subjectId     String
  type          MaterialType
  fileUrl       String?
  fileName      String?
  fileSize      Int?
  chapter       String?
  teacherId     String
  isPublic      Boolean      @default(true)
  downloadCount Int          @default(0)
  uploadedAt    DateTime     @default(now())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  subject    Subject             @relation(fields: [subjectId], references: [id])
  teacher    User                @relation("TeacherMaterials", fields: [teacherId], references: [id])
  accessLogs MaterialAccessLog[]

  @@map("materials")
}

model MaterialAccessLog {
  id           String    @id @default(cuid())
  studentId    String
  materialId   String
  viewedAt     DateTime?
  downloadedAt DateTime?
  ipAddress    String?
  createdAt    DateTime  @default(now())

  // Relations
  student  User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  material Material @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@map("material_access_logs")
}

model Routine {
  id        String    @id @default(cuid())
  classId   String
  subjectId String
  teacherId String
  dayOfWeek DayOfWeek
  startTime String // Format: "09:00"
  endTime   String // Format: "10:00"
  room      String?
  isActive  Boolean   @default(true)
  createdBy String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  class         Class   @relation(fields: [classId], references: [id])
  subject       Subject @relation(fields: [subjectId], references: [id])
  teacher       User    @relation("TeacherRoutines", fields: [teacherId], references: [id])
  createdByUser User    @relation("RoutineCreatedBy", fields: [createdBy], references: [id])

  @@unique([classId, subjectId, dayOfWeek, startTime])
  @@map("routines")
}

model Notice {
  id            String         @id @default(cuid())
  title         String
  content       String
  category      NoticeCategory @default(GENERAL)
  priority      Priority       @default(MEDIUM)
  attachmentUrl String?
  classId       String? // null = global notice
  publishedBy   String
  isPublished   Boolean        @default(false)
  publishedAt   DateTime?
  expiresAt     DateTime?
  viewCount     Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  class           Class? @relation(fields: [classId], references: [id])
  publishedByUser User   @relation("PublishedByUser", fields: [publishedBy], references: [id])

  @@map("notices")
}

model Exam {
  id           String     @id @default(cuid())
  title        String
  description  String?
  subjectId    String
  classId      String?
  type         ExamType   @default(QUIZ)
  status       ExamStatus @default(UPCOMING)
  examLink     String? // Google Form or internal exam link
  startTime    DateTime
  endTime      DateTime
  duration     Int? // in minutes
  totalMarks   Int?
  passingMarks Int?
  instructions String?
  createdBy    String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  subject       Subject          @relation(fields: [subjectId], references: [id])
  class         Class?           @relation(fields: [classId], references: [id])
  createdByUser User             @relation("ExamCreatedBy", fields: [createdBy], references: [id])
  submissions   ExamSubmission[]
  results       Result[]
  certificates  Certificate[]

  @@map("exams")
}

model ExamSubmission {
  id          String   @id @default(cuid())
  studentId   String
  examId      String
  submittedAt DateTime @default(now())
  answers     Json? // Store answers as JSON
  ipAddress   String?
  userAgent   String?
  isLate      Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  student User @relation(fields: [studentId], references: [id], onDelete: Cascade)
  exam    Exam @relation(fields: [examId], references: [id], onDelete: Cascade)

  @@unique([studentId, examId])
  @@map("exam_submissions")
}

model Result {
  id          String    @id @default(cuid())
  studentId   String
  examId      String
  subjectId   String
  marks       Float
  totalMarks  Float
  percentage  Float
  grade       Grade?
  remarks     String?
  isPublished Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  student User    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  exam    Exam    @relation(fields: [examId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id])

  @@unique([studentId, examId, subjectId])
  @@map("results")
}

model Certificate {
  id           String   @id @default(cuid())
  studentId    String
  examId       String?
  title        String
  description  String?
  pdfUrl       String
  templateId   String?
  serialNumber String   @unique
  issuedDate   DateTime @default(now())
  isValid      Boolean  @default(true)
  generatedAt  DateTime @default(now())
  createdAt    DateTime @default(now())

  // Relations
  student User  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  exam    Exam? @relation(fields: [examId], references: [id])

  @@map("certificates")
}

model Notification {
  id         String           @id @default(cuid())
  senderId   String? // null for system notifications
  receiverId String
  title      String
  message    String
  type       NotificationType @default(GENERAL)
  data       Json? // Additional notification data
  isRead     Boolean          @default(false)
  readAt     DateTime?
  sentAt     DateTime         @default(now())
  createdAt  DateTime         @default(now())

  // Relations
  sender   User? @relation("NotificationSender", fields: [senderId], references: [id])
  receiver User  @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Message {
  id            String    @id @default(cuid())
  senderId      String
  receiverId    String? // null for class/group messages
  classId       String? // for class-wide messages
  content       String
  attachmentUrl String?
  isRead        Boolean   @default(false)
  readAt        DateTime?
  replyToId     String? // for threaded conversations
  isDeleted     Boolean   @default(false)
  timestamp     DateTime  @default(now())
  createdAt     DateTime  @default(now())

  // Relations
  sender   User      @relation("MessageSender", fields: [senderId], references: [id])
  receiver User?     @relation("MessageReceiver", fields: [receiverId], references: [id])
  class    Class?    @relation(fields: [classId], references: [id])
  replyTo  Message?  @relation("MessageReplies", fields: [replyToId], references: [id])
  replies  Message[] @relation("MessageReplies")

  @@map("messages")
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  performedBy String? // Admin who performed the action
  action      String // e.g., "LOGIN", "USER_BLOCKED", "USER_UNBLOCKED", "USER_UPDATED", "USER_DELETED"
  entity      String? // e.g., "User", "LiveClass", "Material"
  entityId    String?
  details     Json?
  notes       String? // Admin notes for the action
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())

  @@map("activity_logs")
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

model FileUpload {
  id           String   @id @default(cuid())
  originalName String
  fileName     String   @unique
  mimeType     String
  size         Int
  path         String
  uploadedBy   String
  entityType   String? // e.g., "Material", "Notice", "Profile"
  entityId     String?
  isPublic     Boolean  @default(false)
  createdAt    DateTime @default(now())

  @@map("file_uploads")
}

// ============================================
// MODULE/SUBJECT LEARNING SYSTEM
// ============================================

model Module {
  id              String       @id @default(cuid())
  title           String
  slug            String       @unique
  description     String?
  subjectId       String
  classId         String?
  teacherId       String
  thumbnailUrl    String?
  level           String?      @default("BEGINNER") // BEGINNER, INTERMEDIATE, ADVANCED
  duration        Int? // Total duration in minutes
  totalTopics     Int          @default(0)
  totalLessons    Int          @default(0)
  status          ModuleStatus @default(DRAFT)
  isFeatured      Boolean      @default(false)
  isPublic        Boolean      @default(false)
  viewCount       Int          @default(0)
  enrollmentCount Int          @default(0)
  avgRating       Float?       @default(0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  publishedAt     DateTime?

  // Relations
  subject         Subject            @relation(fields: [subjectId], references: [id])
  class           Class?             @relation(fields: [classId], references: [id])
  teacher         User               @relation("ModuleTeacher", fields: [teacherId], references: [id])
  topics          Topic[]
  enrollments     ModuleEnrollment[]
  reviews         ModuleReview[]
  activityHistory ActivityHistory[]
  resources       ModuleResource[]

  @@index([subjectId])
  @@index([teacherId])
  @@index([status])
  @@map("modules")
}

model Topic {
  id           String   @id @default(cuid())
  title        String
  description  String?
  moduleId     String
  orderIndex   Int
  duration     Int? // Duration in minutes
  totalLessons Int      @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  module          Module            @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  lessons         Lesson[]
  progress        TopicProgress[]
  activityHistory ActivityHistory[]
  resources       ModuleResource[]

  @@index([moduleId])
  @@index([orderIndex])
  @@map("topics")
}

model Lesson {
  id             String     @id @default(cuid())
  title          String
  description    String?
  topicId        String
  type           LessonType @default(TEXT)
  orderIndex     Int
  duration       Int? // Duration in minutes
  videoUrl       String? // For VIDEO type
  youtubeVideoId String? // For regular YouTube videos
  content        String? // For TEXT type
  isFree         Boolean    @default(false)
  isPublished    Boolean    @default(true)
  viewCount      Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  topic           Topic               @relation(fields: [topicId], references: [id], onDelete: Cascade)
  attachments     LessonAttachment[]
  liveSession     YoutubeLiveSession?
  progress        LessonProgress[]
  notes           LessonNote[]
  activityHistory ActivityHistory[]
  resources       ModuleResource[]

  @@index([topicId])
  @@index([type])
  @@index([orderIndex])
  @@map("lessons")
}

model LessonAttachment {
  id            String   @id @default(cuid())
  lessonId      String
  title         String
  fileName      String
  fileUrl       String
  fileSize      Int?
  fileType      String?
  downloadCount Int      @default(0)
  createdAt     DateTime @default(now())

  // Relations
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([lessonId])
  @@map("lesson_attachments")
}

model YoutubeLiveSession {
  id                 String    @id @default(cuid())
  lessonId           String    @unique
  youtubeUrl         String
  youtubeLiveId      String?
  scheduledStartTime DateTime
  scheduledEndTime   DateTime
  actualStartTime    DateTime?
  actualEndTime      DateTime?
  isLive             Boolean   @default(false)
  recordingUrl       String?
  maxViewers         Int?
  currentViewers     Int?      @default(0)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("youtube_live_sessions")
}

model ModuleEnrollment {
  id             String    @id @default(cuid())
  moduleId       String
  studentId      String
  enrolledBy     String // Admin who enrolled the student
  enrolledAt     DateTime  @default(now())
  completedAt    DateTime?
  progress       Float     @default(0) // Percentage 0-100
  lastAccessedAt DateTime?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  module         Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  student        User             @relation("StudentEnrollments", fields: [studentId], references: [id], onDelete: Cascade)
  enrolledByUser User             @relation("EnrollmentCreator", fields: [enrolledBy], references: [id])
  topicProgress  TopicProgress[]
  lessonProgress LessonProgress[]

  @@unique([moduleId, studentId])
  @@index([studentId])
  @@index([enrolledBy])
  @@map("module_enrollments")
}

model TopicProgress {
  id               String    @id @default(cuid())
  enrollmentId     String
  topicId          String
  studentId        String
  completedLessons Int       @default(0)
  totalLessons     Int       @default(0)
  progress         Float     @default(0) // Percentage 0-100
  isCompleted      Boolean   @default(false)
  completedAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  enrollment ModuleEnrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  topic      Topic            @relation(fields: [topicId], references: [id], onDelete: Cascade)
  student    User             @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([enrollmentId, topicId])
  @@index([studentId])
  @@map("topic_progress")
}

model LessonProgress {
  id            String    @id @default(cuid())
  lessonId      String
  studentId     String
  enrollmentId  String
  isCompleted   Boolean   @default(false)
  completedAt   DateTime?
  watchTime     Int?      @default(0) // in seconds
  lastPosition  Int?      @default(0) // in seconds for video
  attemptsCount Int?      @default(0) // for quizzes
  score         Float? // for quizzes/assignments
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  lesson     Lesson           @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student    User             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  enrollment ModuleEnrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@unique([lessonId, studentId])
  @@index([enrollmentId])
  @@map("lesson_progress")
}

model LessonNote {
  id        String   @id @default(cuid())
  lessonId  String
  studentId String
  content   String
  timestamp Int? // Video timestamp in seconds
  isPinned  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  lesson  Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student User   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([lessonId])
  @@index([studentId])
  @@map("lesson_notes")
}

model ModuleReview {
  id          String   @id @default(cuid())
  moduleId    String
  studentId   String
  rating      Int // 1-5
  comment     String?
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  module  Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  student User   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([moduleId, studentId])
  @@map("module_reviews")
}

model ActivityHistory {
  id           String       @id @default(cuid())
  userId       String
  activityType ActivityType
  moduleId     String?
  topicId      String?
  lessonId     String?
  title        String
  description  String?
  metadata     Json? // Additional data
  ipAddress    String?
  userAgent    String?
  timestamp    DateTime     @default(now())

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  module Module? @relation(fields: [moduleId], references: [id], onDelete: SetNull)
  topic  Topic?  @relation(fields: [topicId], references: [id], onDelete: SetNull)
  lesson Lesson? @relation(fields: [lessonId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([activityType])
  @@index([timestamp])
  @@index([moduleId])
  @@map("activity_history")
}

// ============================================
// MODULE CONTENT/RESOURCE SYSTEM
// ============================================

model ModuleResource {
  id String @id @default(cuid())

  // Content Details
  title       String
  description String?
  category    ResourceCategory @default(OTHER)
  tags        String[] // Searchable tags

  // File Information
  type        ResourceType
  fileUrl     String?
  fileName    String?
  fileSize    Int? // in bytes
  mimeType    String?
  externalUrl String? // For links, YouTube URLs

  // Attachment Points (Flexible - can attach to multiple levels)
  moduleId String?
  topicId  String?
  lessonId String?

  // Access Control
  status         ResourceStatus @default(PUBLISHED)
  isHidden       Boolean        @default(false)
  visibleToRoles String[] // ["STUDENT", "TEACHER", "ADMIN"]

  // Metadata
  orderIndex  Int     @default(0)
  version     Int     @default(1)
  isPinned    Boolean @default(false)
  isMandatory Boolean @default(false)

  // Analytics
  viewCount     Int @default(0)
  downloadCount Int @default(0)

  // Audit Trail
  uploadedBy  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  archivedAt  DateTime?

  // Relations
  module     Module?             @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  topic      Topic?              @relation(fields: [topicId], references: [id], onDelete: Cascade)
  lesson     Lesson?             @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  uploader   User                @relation("ResourceUploader", fields: [uploadedBy], references: [id])
  accessLogs ResourceAccessLog[]

  @@index([moduleId])
  @@index([topicId])
  @@index([lessonId])
  @@index([status])
  @@index([category])
  @@index([uploadedBy])
  @@index([type])
  @@map("module_resources")
}

model ResourceAccessLog {
  id         String   @id @default(cuid())
  resourceId String
  userId     String
  action     String // VIEW, DOWNLOAD, EDIT, DELETE
  ipAddress  String?
  userAgent  String?
  metadata   Json?
  timestamp  DateTime @default(now())

  // Relations
  resource ModuleResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user     User           @relation("ResourceAccess", fields: [userId], references: [id], onDelete: Cascade)

  @@index([resourceId])
  @@index([userId])
  @@index([timestamp])
  @@index([action])
  @@map("resource_access_logs")
}
